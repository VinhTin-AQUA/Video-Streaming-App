
name: video-streaming

services:

  minio:
    image: docker.io/bitnami/minio:latest
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./MinIO-data/data:/data  # Thư mục local để chứa file
      # - ./config:/root/.minio  # Lưu trữ cấu hình
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin@123
      - MINIO_DEFAULT_BUCKETS=files
    networks:
      - video-streaming

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - video-streaming

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - video-streaming

#   kafka-ui:
#     image: provectuslabs/kafka-ui:latest
#     container_name: kafka-ui
#     restart: always
#     depends_on:
#       - kafka
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: local
#       KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#     networks:
#       - video-streaming

  # mongo-db:
  #   container_name: mongo-db
  #   image: mongo:latest
  #   ports:
  #     - '27018:27017'
  #   networks:
  #     - video-streaming

  # auth-service:
  #   container_name: auth-service
  #   image: auth-service
  #   build:
  #     context: ./auth-service
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - mongo-db
  #     - kafka
  #   ports:
  #     - "3001:3001"
  #   env_file:
  #     - ./auth-service/.env
  #   networks:
  #     - video-streaming

  # user-service:
  #   container_name: user-service
  #   image: user-service
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - mongo-db
  #     - kafka
  #     - minio
  #   ports:
  #     - "3003:3003"
  #   env_file:
  #     - ./user-service/.env
  #   networks:
  #     - video-streaming
    
  # video-metadata-service:
  #   container_name: video-metadata-service
  #   image: video-metadata-service
  #   build:
  #     context: ./video-metadata-service
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - mongo-db
  #     - minio
  #   ports:
  #     - "3002:3002"
  #   env_file:
  #     - ./video-metadata-service/.env
  #   networks:
  #     - video-streaming

  # streaming-service:
  #   image: ${DOCKER_REGISTRY-}streaming-service
  #   container_name: streaming-service
  #   build:
  #     context: ./StreamingService
  #     dockerfile: StreamingService/Dockerfile
  #   ports:
  #     - "5057:8080"
  #   depends_on:
  #     - minio
  #   networks: 
  #     - video-streaming

  # transcoding-service:
  #   image: ${DOCKER_REGISTRY-}transcoding-service
  #   container_name: transcoding-service
  #   ports:
  #     - "5262:8080"
  #   build:
  #     context: ./TranscodingService
  #     dockerfile: TranscodingService/Dockerfile
  #   depends_on:
  #     - kafka
  #     - minio
  #     - video-metadata-service
  #   networks:
  #     - video-streaming
  
  # videoupload-service:
  #   image: ${DOCKER_REGISTRY-}videoupload-service
  #   container_name: videoupload-service
  #   build:
  #     context: ./VideoUploadService
  #     dockerfile: VideoUploadService/Dockerfile
  #   ports:
  #     - "5289:8080"
  #   depends_on:
  #     - kafka
  #     - minio
  #     - video-metadata-service
  #   networks:
  #     - video-streaming

  # api-gateway:
  #   image: ${DOCKER_REGISTRY-}api-gateway
  #   container_name: api-gateway
  #   build:
  #     context: ./API-Gateway
  #     dockerfile: API-Gateway/Dockerfile
  #   ports:
  #     - 5246:8080
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     # - ASPNETCORE_HTTP_PORTS=8080
  #   depends_on:
  #     - kafka
  #     - minio
  #     - auth-service
  #     - streaming-service
  #     - transcoding-service
  #     - video-metadata-service
  #     - videoupload-service
  #     - user-service
  #   networks:
  #     - video-streaming

  # angular-client:
  #   image: angular-client
  #   container_name: angular-client
  #   build:
  #       context: ./video-app-client
  #       dockerfile: Dockerfile
  #   ports:
  #     - "4200:4200"
  #   depends_on:
  #     - api-gateway
  #   restart: always
  #   networks:
  #     - video-streaming

networks:
  video-streaming:
    name: video-streaming
    driver: bridge